{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","onClick","value","refreshPage","window","location","reload","Board","i","_this","this","squares","renderSquare","Component","Game","Object","classCallCheck","_super","call","state","xIsNext","stepNumber","history","Array","fill","step","setState","slice","length","calculateWinner","concat","status","_this2","current","winner","moves","map","move","desc","key","jumpTo","Board_Board","handleClick","lines","_lines$i","slicedToArray","b","c","App","Game_Game","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c33eccc0.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n","import React, { Component } from 'react';\nimport Square from './Square';\n\nconst refreshPage = ()=>{\n    window.location.reload();  }\n\nexport default class Board extends Component {\n    renderSquare(i){\n        return <Square value={this.props.squares[i]}\n        onClick={()=>this.props.onClick(i)}\n        />\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"border-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"border-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"border-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n                <div>\n                <h1>{}</h1>\n                 <button onClick={refreshPage}>Jugar otra vez</button>    \n                </div>\n                \n            </div>\n        )\n    }\n\n    \n}\n\n\n\n\n        \n","import React, { Component } from 'react'\nimport Board from './Board';\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            xIsNext: true,\n            stepNumber: 0,\n            history: [\n                { squares: Array(9).fill(null) }\n            ]\n        }\n    }\n    jumpTo(step){\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step%2)===0\n        })\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        const winner = calculateWinner(squares);\n        if (winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat({\n                squares: squares\n            }),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length\n        });\n\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        const moves = history.map((step, move) => {\n            const desc = move ? 'Casilla No.' + move : 'Haz Click en una Casilla para Comenzar';\n            return (\n                <li key={move}>\n                    <button onClick={() => { this.jumpTo(move) }}>\n                        {desc}\n                    </button>\n                </li>\n            )\n        });\n        let status;\n        if (winner) {\n            status = 'El GANADOR es el JUGADOR ' + winner;\n        } else {\n            status = 'Es el TURNO del JUGADOR' + (this.state.xIsNext ? ' X' : ' O');\n        }\n\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board onClick={(i) => this.handleClick(i)}\n                        squares={current.squares} />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ul>{moves}</ul>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n            return squares[a];\n        }\n    }\n\n    return null;\n}","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n   <Game />\n  );\n}\n\nfunction refreshPage(){ \n  window.location.reload(); \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}